name: Build Electron App and Release Notes

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  release-notes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git log

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate release notes
        run: node scripts/generate-release-notes.js
        env:
          XAI_API_KEY: ${{ secrets.XAI_API_KEY }}

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: RELEASE_NOTES.md

  build:
    needs: release-notes
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install and Build MongoDB Wrappers (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          for dir in packages/mongodb-wrapper-v*; do
            echo "Installing and building in $dir"
            (cd "$dir" && npm install && npm run build)
          done

      - name: Install and Build MongoDB Wrappers (Windows)
        if: runner.os == 'Windows'
        run: |
          Get-ChildItem -Path packages -Directory -Filter "mongodb-wrapper-v*" | ForEach-Object {
            Write-Host "Installing and building in $($_.Name)"
            Push-Location $_.FullName
            npm install
            npm run build
            Pop-Location
          }

      - name: Install root dependencies
        run: npm install

      - name: Install the Developer ID Certificate (macOS only)
        if: runner.os == 'macOS'
        env:
          MACOS_DEVELOPER_ID_CERTIFICATE: ${{ secrets.MACOS_DEVELOPER_ID_CERTIFICATE }}
          MACOS_DEVELOPER_ID_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_DEVELOPER_ID_CERTIFICATE_PASSWORD }}
        run: |
          # Create a temporary keychain
          security create-keychain -p mysecret build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p mysecret build.keychain

          # Decode and import the certificate
          echo -n "$MACOS_DEVELOPER_ID_CERTIFICATE" | base64 --decode > developer-id.p12
          security import developer-id.p12 -k build.keychain -P "$MACOS_DEVELOPER_ID_CERTIFICATE_PASSWORD" -T /usr/bin/codesign

          # Set the keychain as default and allow codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k mysecret build.keychain
          security list-keychain -d user -s build.keychain

      - name: Build and package
        run: npm run package
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # CSC_LINK: ${{ secrets.MACOS_DEVELOPER_ID_CERTIFICATE }} # Optional fallback for identity
          # CSC_KEY_PASSWORD: ${{ secrets.MACOS_DEVELOPER_ID_CERTIFICATE_PASSWORD }} # Optional fallback for password

      - name: Clean Up (macOS only)
        if: runner.os == 'macOS' && always()
        run: |
          security delete-keychain build.keychain
          rm developer-id.p12

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          # Use a consistent pattern for artifact names to easily download them later
          name: ${{ matrix.os }}-release-build
          path: release/ # Path to your electron-builder output directory

  release:
    # This job depends on the 'release-notes' job for the body content
    # AND all instances of the 'build' job to ensure binaries are ready.
    needs: [release-notes, build]
    runs-on: ubuntu-latest # Run this on a single OS as it's just coordinating
    permissions:
      contents: write # Necessary to create and upload assets to a release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Needed to access RELEASE_NOTES.md if it's not an artifact

      - name: Download release notes artifact
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: . # Download to current directory

      # Download all platform-specific build artifacts
      - name: Download all release builds
        uses: actions/download-artifact@v4
        with:
          # This downloads ALL artifacts that match the pattern,
          # placing them in subdirectories named after the artifact names (e.g., ubuntu-latest-release-build/, windows-latest-release-build/)
          # The '*' matches the 'name' given in the upload step for each OS.
          pattern: '*-release-build'
          path: ./release-builds-download

      - name: List downloaded artifacts (for debugging)
        # Limit the directory depth of ls output for brevity
        run: find ./release-builds-download -maxdepth 3

      - name: Create GitHub Release
        id: create_release # Give this step an ID to reference its outputs
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }} # Use the same tag as before
          release_name: Release v${{ github.run_number }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false # Set to true if you want draft/pre-release

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1 # A better action for uploading multiple assets
        if: success() # Only run if release creation was successful
        with:
          # Update file pattern to specifically target the .zip files generated by electron-builder.
          # These will be found inside the 'release/' subdirectory within each downloaded artifact.
          files: |
            ./release-builds-download/*/release/*.zip
            ./release-builds-download/*/release/*.dmg
            ./release-builds-download/*/release/*.AppImage
            ./release-builds-download/*/release/*.exe
          tag_name: v${{ github.run_number }} # Match the tag created by the previous step
          # You can add a name for each asset if you want to be more specific,
          # but for multiple files, a wildcard is easier.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
