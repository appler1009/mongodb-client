name: Build Electron App and Release Notes

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  release-notes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate release notes
        run: node scripts/generate-release-notes.js
        env:
          XAI_API_KEY: ${{ secrets.XAI_API_KEY }}

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: RELEASE_NOTES.md

  build:
    needs: release-notes
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install and Build MongoDB Wrappers (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          for dir in packages/mongodb-wrapper-v*; do
            echo "Installing and building in $dir"
            (cd "$dir" && npm install && npm run build)
          done

      - name: Install and Build MongoDB Wrappers (Windows)
        if: runner.os == 'Windows'
        run: |
          Get-ChildItem -Path packages -Directory -Filter "mongodb-wrapper-v*" | ForEach-Object {
            Write-Host "Installing and building in $($_.Name)"
            Push-Location $_.FullName
            npm install
            npm run build
            Pop-Location
          }

      - name: Install root dependencies
        run: npm install

      - name: Install the Developer ID Certificate (macOS only)
        if: runner.os == 'macOS'
        env:
          MACOS_DEVELOPER_ID_CERTIFICATE: ${{ secrets.MACOS_DEVELOPER_ID_CERTIFICATE }}
          MACOS_DEVELOPER_ID_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_DEVELOPER_ID_CERTIFICATE_PASSWORD }}
        run: |
          security create-keychain -p mysecret build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p mysecret build.keychain
          echo -n "$MACOS_DEVELOPER_ID_CERTIFICATE" | base64 --decode > developer-id.p12
          security import developer-id.p12 -k build.keychain -P "$MACOS_DEVELOPER_ID_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k mysecret build.keychain
          security list-keychain -d user -s build.keychain

      - name: Build and package
        run: npm run package
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILDER_PUBLISH: never

      - name: Debug release directory
        if: runner.os == 'macOS'
        run: ls -la release/

      - name: Notarize the macOS App (macOS only)
        if: runner.os == 'macOS' && success()
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          XCRUN_NOTARYTOOL_SKIP_SUBMISSION: false
        run: |
          dmg_path=$(ls release/MongoDB\ Client-*.dmg)
          if [ -z "$dmg_path" ]; then
            echo "Error: No .dmg file found in release/"
            exit 1
          fi
          echo "Notarizing $dmg_path"
          xcrun notarytool submit "$dmg_path" --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait
          xcrun stapler staple "$dmg_path"

      - name: Clean Up (macOS only)
        if: runner.os == 'macOS' && always()
        run: |
          security delete-keychain build.keychain
          rm developer-id.p12

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-release-build
          path: release/

  release:
    needs: [release-notes, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Extract Package Version
        id: package_version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Download release notes artifact
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - name: Download all release builds
        uses: actions/download-artifact@v4
        with:
          pattern: '*-release-build'
          path: ./release-builds-download

      - name: List downloaded artifacts (for debugging)
        run: find ./release-builds-download -maxdepth 3

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package_version.outputs.PACKAGE_VERSION }}
          release_name: Release v${{ steps.package_version.outputs.PACKAGE_VERSION }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        if: success()
        with:
          files: |
            ./release-builds-download/*/MongoDB\ Client-*.dmg
            ./release-builds-download/*/MongoDB\ Client\ Setup\ *.exe
            ./release-builds-download/*/MongoDB\ Client-*.AppImage
            ./release-builds-download/*/release/*.zip
          tag_name: v${{ steps.package_version.outputs.PACKAGE_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
