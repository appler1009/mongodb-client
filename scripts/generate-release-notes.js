const { execSync } = require('child_process');
const fs = require('fs');

const API_URL = 'https://api.x.ai/v1/chat/completions';
const API_KEY = process.env.XAI_API_KEY;

async function generateReleaseNotes() {
  console.log('Starting release notes generation...');

  let commitsToSummarize = ''; // Variable to hold the final commit messages for Grok

  try {
    let lastTag = '';
    try {
      lastTag = execSync('git describe --tags --abbrev=0').toString().trim();
      console.log(`Last Git Tag: '${lastTag}'`);
    } catch (e) {
      console.warn('No Git tags found. Will summarize from the beginning of history or last 10 commits.');
    }

    let commitsSinceLastTag = '';
    if (lastTag) {
      commitsSinceLastTag = execSync(`git log ${lastTag}..HEAD --pretty=%B`).toString().trim();
      console.log(`Commits fetched since last tag:\n---\n${commitsSinceLastTag}\n---`);
    }

    const numCommitsSinceLastTag = commitsSinceLastTag.split('\n\n').filter(Boolean).length;

    // Determine which commits to send to the LLM
    if (numCommitsSinceLastTag === 0) {
      // If no commits since last tag, or no tag at all, get the last 10 overall.
      // This ensures we always have some history for the initial release or releases with no changes.
      commitsToSummarize = execSync('git log -n 10 --pretty=%B').toString().trim();
      console.log('No new commits since last tag. Using last 10 commits overall for summary:');
    } else if (numCommitsSinceLastTag < 10) {
      // If fewer than 10 commits since the last tag, append older commits to reach 10
      // Fetch `10 - numCommitsSinceLastTag` older commits, skipping the ones already found.
      const neededCommits = 10 - numCommitsSinceLastTag;
      // git log -n <count> --skip=<offset> --pretty=%B
      const olderCommits = execSync(`git log -n ${neededCommits} --skip=${numCommitsSinceLastTag} --pretty=%B`).toString().trim();
      commitsToSummarize = `${commitsSinceLastTag}\n\n${olderCommits}`.trim();
      console.log(`Fewer than 10 commits since last tag (${numCommitsSinceLastTag}). Appended ${neededCommits} older commits. Total commits for summary:`);
    } else {
      // If 10 or more commits since last tag, use those.
      commitsToSummarize = commitsSinceLastTag;
      console.log(`Using all ${numCommitsSinceLastTag} commits found since last tag for summary.`);
    }

    console.log(`Final commits for Grok:\n---\n${commitsToSummarize}\n---`);

    if (!commitsToSummarize) {
      console.warn('No commits found in the repository history for summary. Generating placeholder.');
      fs.writeFileSync('RELEASE_NOTES.md', 'Initial release. No commit history to summarize yet.');
      return;
    }

    // Prepare prompt for Grok
    const prompt = `Summarize the following commit messages into concise release notes in Markdown format, grouping by features, bug fixes, and chores. Limit the summary to a few meaningful items per group, avoiding a detailed list of every commit. Don't include any additional information or context:\n\n${commitsToSummarize}`;
    console.log(`Prompt sent to API:\n---\n${prompt}\n---`);

    // Call Grok API using the native global fetch API (available in Node.js 18+)
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'grok-3-mini',
        messages: [{ role: 'user', content: prompt }],
        // Increased max_tokens significantly to ensure enough budget for both reasoning and content.
        max_tokens: 50000, // Increased to provide more room
        temperature: 0.7,
      }),
    });

    console.log(`API Response Status: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      const errorBody = await response.text();
      console.error(`API Error Body: ${errorBody}`);
      throw new Error(`API error: ${response.status} ${response.statusText} - ${errorBody}`);
    }

    const data = await response.json();
    console.log(`Parsed API Response Data: ${JSON.stringify(data, null, 2)}`); // Log full response for debugging

    // Check if choices and message content exist and are a string before assigning
    const releaseNotes = data.choices && data.choices[0] && data.choices[0].message && typeof data.choices[0].message.content === 'string'
      ? data.choices[0].message.content
      : 'No release notes generated by API. Check API response structure or increase max_tokens further.'; // More specific fallback

    // Save to file
    fs.writeFileSync('RELEASE_NOTES.md', releaseNotes);
    console.log('Release notes saved to RELEASE_NOTES.md');
  } catch (error) {
    console.error(`Error in generateReleaseNotes: ${error.message}`);
    // If an error occurs, still try to create a placeholder file
    fs.writeFileSync('RELEASE_NOTES.md', `Error generating release notes: ${error.message}`);
  }
}

generateReleaseNotes().catch(console.error);
