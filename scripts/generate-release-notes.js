const { execSync } = require('child_process');
const fs = require('fs');

const API_URL = 'https://api.x.ai/v1/chat/completions';
const API_KEY = process.env.XAI_API_KEY;

async function generateReleaseNotes() {
  console.log('Starting release notes generation...');

  try {
    // Fetch commits since last tag
    const lastTag = execSync('git describe --tags --abbrev=0').toString().trim();
    console.log(`Last Git Tag: '${lastTag}'`);

    const commits = execSync(`git log ${lastTag}..HEAD --pretty=%B`).toString().trim();
    console.log(`Commits fetched:\n---\n${commits}\n---`);

    if (!commits) {
      console.warn('No new commits found since last tag. Generating empty release notes.');
      fs.writeFileSync('RELEASE_NOTES.md', 'No new features, bug fixes, or chores since last release.');
      return;
    }

    // Prepare prompt for Grok
    const prompt = `Summarize the following commit messages into concise, professional release notes in Markdown format, grouping by features, bug fixes, and chores:\n\n${commits}`;
    console.log(`Prompt sent to API:\n---\n${prompt}\n---`);

    // Call Grok API using the native global fetch API (available in Node.js 18+)
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'grok-3-mini',
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 250,
        temperature: 0.7,
      }),
    });

    console.log(`API Response Status: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      const errorBody = await response.text();
      console.error(`API Error Body: ${errorBody}`);
      throw new Error(`API error: ${response.status} ${response.statusText} - ${errorBody}`);
    }

    const data = await response.json();
    console.log(`Parsed API Response Data: ${JSON.stringify(data, null, 2)}`); // Log full response for debugging

    const releaseNotes = data.choices[0]?.message?.content || 'No release notes generated by API.';

    // Save to file
    fs.writeFileSync('RELEASE_NOTES.md', releaseNotes);
    console.log('Release notes saved to RELEASE_NOTES.md');
  } catch (error) {
    console.error(`Error in generateReleaseNotes: ${error.message}`);
    // If an error occurs, still try to create a placeholder file
    fs.writeFileSync('RELEASE_NOTES.md', `Error generating release notes: ${error.message}`);
  }
}

generateReleaseNotes().catch(console.error);
